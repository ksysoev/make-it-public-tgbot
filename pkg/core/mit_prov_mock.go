// Code generated by mockery. DO NOT EDIT.

//go:build !compile

package core

import mock "github.com/stretchr/testify/mock"

// MockMITProv is an autogenerated mock type for the MITProv type
type MockMITProv struct {
	mock.Mock
}

type MockMITProv_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMITProv) EXPECT() *MockMITProv_Expecter {
	return &MockMITProv_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with no fields
func (_m *MockMITProv) GenerateToken() (*APIToken, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 *APIToken
	var r1 error
	if rf, ok := ret.Get(0).(func() (*APIToken, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *APIToken); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*APIToken)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMITProv_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockMITProv_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
func (_e *MockMITProv_Expecter) GenerateToken() *MockMITProv_GenerateToken_Call {
	return &MockMITProv_GenerateToken_Call{Call: _e.mock.On("GenerateToken")}
}

func (_c *MockMITProv_GenerateToken_Call) Run(run func()) *MockMITProv_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockMITProv_GenerateToken_Call) Return(_a0 *APIToken, _a1 error) *MockMITProv_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMITProv_GenerateToken_Call) RunAndReturn(run func() (*APIToken, error)) *MockMITProv_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMITProv creates a new instance of MockMITProv. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMITProv(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMITProv {
	mock := &MockMITProv{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
