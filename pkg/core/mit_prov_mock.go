// Code generated by mockery. DO NOT EDIT.

//go:build !compile

package core

import mock "github.com/stretchr/testify/mock"

// MockMITProv is an autogenerated mock type for the MITProv type
type MockMITProv struct {
	mock.Mock
}

type MockMITProv_Expecter struct {
	mock *mock.Mock
}

func (_m *MockMITProv) EXPECT() *MockMITProv_Expecter {
	return &MockMITProv_Expecter{mock: &_m.Mock}
}

// GenerateToken provides a mock function with given fields: keyID, ttl
func (_m *MockMITProv) GenerateToken(keyID string, ttl int64) (*APIToken, error) {
	ret := _m.Called(keyID, ttl)

	if len(ret) == 0 {
		panic("no return value specified for GenerateToken")
	}

	var r0 *APIToken
	var r1 error
	if rf, ok := ret.Get(0).(func(string, int64) (*APIToken, error)); ok {
		return rf(keyID, ttl)
	}
	if rf, ok := ret.Get(0).(func(string, int64) *APIToken); ok {
		r0 = rf(keyID, ttl)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*APIToken)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int64) error); ok {
		r1 = rf(keyID, ttl)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockMITProv_GenerateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GenerateToken'
type MockMITProv_GenerateToken_Call struct {
	*mock.Call
}

// GenerateToken is a helper method to define mock.On call
//   - keyID string
//   - ttl int64
func (_e *MockMITProv_Expecter) GenerateToken(keyID interface{}, ttl interface{}) *MockMITProv_GenerateToken_Call {
	return &MockMITProv_GenerateToken_Call{Call: _e.mock.On("GenerateToken", keyID, ttl)}
}

func (_c *MockMITProv_GenerateToken_Call) Run(run func(keyID string, ttl int64)) *MockMITProv_GenerateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int64))
	})
	return _c
}

func (_c *MockMITProv_GenerateToken_Call) Return(_a0 *APIToken, _a1 error) *MockMITProv_GenerateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockMITProv_GenerateToken_Call) RunAndReturn(run func(string, int64) (*APIToken, error)) *MockMITProv_GenerateToken_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeToken provides a mock function with given fields: keyID
func (_m *MockMITProv) RevokeToken(keyID string) error {
	ret := _m.Called(keyID)

	if len(ret) == 0 {
		panic("no return value specified for RevokeToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(keyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockMITProv_RevokeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeToken'
type MockMITProv_RevokeToken_Call struct {
	*mock.Call
}

// RevokeToken is a helper method to define mock.On call
//   - keyID string
func (_e *MockMITProv_Expecter) RevokeToken(keyID interface{}) *MockMITProv_RevokeToken_Call {
	return &MockMITProv_RevokeToken_Call{Call: _e.mock.On("RevokeToken", keyID)}
}

func (_c *MockMITProv_RevokeToken_Call) Run(run func(keyID string)) *MockMITProv_RevokeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string))
	})
	return _c
}

func (_c *MockMITProv_RevokeToken_Call) Return(_a0 error) *MockMITProv_RevokeToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockMITProv_RevokeToken_Call) RunAndReturn(run func(string) error) *MockMITProv_RevokeToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockMITProv creates a new instance of MockMITProv. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockMITProv(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockMITProv {
	mock := &MockMITProv{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
