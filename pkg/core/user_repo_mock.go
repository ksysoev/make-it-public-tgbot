// Code generated by mockery. DO NOT EDIT.

//go:build !compile

package core

import (
	context "context"
	time "time"

	mock "github.com/stretchr/testify/mock"
)

// MockUserRepo is an autogenerated mock type for the UserRepo type
type MockUserRepo struct {
	mock.Mock
}

type MockUserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepo) EXPECT() *MockUserRepo_Expecter {
	return &MockUserRepo_Expecter{mock: &_m.Mock}
}

// AddAPIKey provides a mock function with given fields: ctx, userID, apiKeyID, expiresIn
func (_m *MockUserRepo) AddAPIKey(ctx context.Context, userID string, apiKeyID string, expiresIn time.Duration) error {
	ret := _m.Called(ctx, userID, apiKeyID, expiresIn)

	if len(ret) == 0 {
		panic("no return value specified for AddAPIKey")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Duration) error); ok {
		r0 = rf(ctx, userID, apiKeyID, expiresIn)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepo_AddAPIKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'AddAPIKey'
type MockUserRepo_AddAPIKey_Call struct {
	*mock.Call
}

// AddAPIKey is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - apiKeyID string
//   - expiresIn time.Duration
func (_e *MockUserRepo_Expecter) AddAPIKey(ctx interface{}, userID interface{}, apiKeyID interface{}, expiresIn interface{}) *MockUserRepo_AddAPIKey_Call {
	return &MockUserRepo_AddAPIKey_Call{Call: _e.mock.On("AddAPIKey", ctx, userID, apiKeyID, expiresIn)}
}

func (_c *MockUserRepo_AddAPIKey_Call) Run(run func(ctx context.Context, userID string, apiKeyID string, expiresIn time.Duration)) *MockUserRepo_AddAPIKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(time.Duration))
	})
	return _c
}

func (_c *MockUserRepo_AddAPIKey_Call) Return(_a0 error) *MockUserRepo_AddAPIKey_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepo_AddAPIKey_Call) RunAndReturn(run func(context.Context, string, string, time.Duration) error) *MockUserRepo_AddAPIKey_Call {
	_c.Call.Return(run)
	return _c
}

// GetAPIKeys provides a mock function with given fields: ctx, userID
func (_m *MockUserRepo) GetAPIKeys(ctx context.Context, userID string) ([]string, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for GetAPIKeys")
	}

	var r0 []string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]string, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []string); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepo_GetAPIKeys_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetAPIKeys'
type MockUserRepo_GetAPIKeys_Call struct {
	*mock.Call
}

// GetAPIKeys is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockUserRepo_Expecter) GetAPIKeys(ctx interface{}, userID interface{}) *MockUserRepo_GetAPIKeys_Call {
	return &MockUserRepo_GetAPIKeys_Call{Call: _e.mock.On("GetAPIKeys", ctx, userID)}
}

func (_c *MockUserRepo_GetAPIKeys_Call) Run(run func(ctx context.Context, userID string)) *MockUserRepo_GetAPIKeys_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepo_GetAPIKeys_Call) Return(_a0 []string, _a1 error) *MockUserRepo_GetAPIKeys_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUserRepo_GetAPIKeys_Call) RunAndReturn(run func(context.Context, string) ([]string, error)) *MockUserRepo_GetAPIKeys_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeToken provides a mock function with given fields: ctx, userID, apiKeyID
func (_m *MockUserRepo) RevokeToken(ctx context.Context, userID string, apiKeyID string) error {
	ret := _m.Called(ctx, userID, apiKeyID)

	if len(ret) == 0 {
		panic("no return value specified for RevokeToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, userID, apiKeyID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockUserRepo_RevokeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeToken'
type MockUserRepo_RevokeToken_Call struct {
	*mock.Call
}

// RevokeToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - apiKeyID string
func (_e *MockUserRepo_Expecter) RevokeToken(ctx interface{}, userID interface{}, apiKeyID interface{}) *MockUserRepo_RevokeToken_Call {
	return &MockUserRepo_RevokeToken_Call{Call: _e.mock.On("RevokeToken", ctx, userID, apiKeyID)}
}

func (_c *MockUserRepo_RevokeToken_Call) Run(run func(ctx context.Context, userID string, apiKeyID string)) *MockUserRepo_RevokeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockUserRepo_RevokeToken_Call) Return(_a0 error) *MockUserRepo_RevokeToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUserRepo_RevokeToken_Call) RunAndReturn(run func(context.Context, string, string) error) *MockUserRepo_RevokeToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUserRepo creates a new instance of MockUserRepo. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUserRepo(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUserRepo {
	mock := &MockUserRepo{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
