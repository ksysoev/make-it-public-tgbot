// Code generated by mockery. DO NOT EDIT.

//go:build !compile

package bot

import (
	context "context"

	core "github.com/ksysoev/make-it-public-tgbot/pkg/core"
	mock "github.com/stretchr/testify/mock"
)

// MockTokenService is an autogenerated mock type for the TokenService type
type MockTokenService struct {
	mock.Mock
}

type MockTokenService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockTokenService) EXPECT() *MockTokenService_Expecter {
	return &MockTokenService_Expecter{mock: &_m.Mock}
}

// CreateToken provides a mock function with given fields: ctx, userID
func (_m *MockTokenService) CreateToken(ctx context.Context, userID string) (*core.Response, error) {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for CreateToken")
	}

	var r0 *core.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*core.Response, error)); ok {
		return rf(ctx, userID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *core.Response); ok {
		r0 = rf(ctx, userID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenService_CreateToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateToken'
type MockTokenService_CreateToken_Call struct {
	*mock.Call
}

// CreateToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockTokenService_Expecter) CreateToken(ctx interface{}, userID interface{}) *MockTokenService_CreateToken_Call {
	return &MockTokenService_CreateToken_Call{Call: _e.mock.On("CreateToken", ctx, userID)}
}

func (_c *MockTokenService_CreateToken_Call) Run(run func(ctx context.Context, userID string)) *MockTokenService_CreateToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTokenService_CreateToken_Call) Return(_a0 *core.Response, _a1 error) *MockTokenService_CreateToken_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenService_CreateToken_Call) RunAndReturn(run func(context.Context, string) (*core.Response, error)) *MockTokenService_CreateToken_Call {
	_c.Call.Return(run)
	return _c
}

// HandleMessage provides a mock function with given fields: ctx, userID, message
func (_m *MockTokenService) HandleMessage(ctx context.Context, userID string, message string) (*core.Response, error) {
	ret := _m.Called(ctx, userID, message)

	if len(ret) == 0 {
		panic("no return value specified for HandleMessage")
	}

	var r0 *core.Response
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*core.Response, error)); ok {
		return rf(ctx, userID, message)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *core.Response); ok {
		r0 = rf(ctx, userID, message)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*core.Response)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, userID, message)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockTokenService_HandleMessage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HandleMessage'
type MockTokenService_HandleMessage_Call struct {
	*mock.Call
}

// HandleMessage is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
//   - message string
func (_e *MockTokenService_Expecter) HandleMessage(ctx interface{}, userID interface{}, message interface{}) *MockTokenService_HandleMessage_Call {
	return &MockTokenService_HandleMessage_Call{Call: _e.mock.On("HandleMessage", ctx, userID, message)}
}

func (_c *MockTokenService_HandleMessage_Call) Run(run func(ctx context.Context, userID string, message string)) *MockTokenService_HandleMessage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockTokenService_HandleMessage_Call) Return(_a0 *core.Response, _a1 error) *MockTokenService_HandleMessage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockTokenService_HandleMessage_Call) RunAndReturn(run func(context.Context, string, string) (*core.Response, error)) *MockTokenService_HandleMessage_Call {
	_c.Call.Return(run)
	return _c
}

// ResetConversation provides a mock function with given fields: ctx, userID
func (_m *MockTokenService) ResetConversation(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for ResetConversation")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokenService_ResetConversation_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ResetConversation'
type MockTokenService_ResetConversation_Call struct {
	*mock.Call
}

// ResetConversation is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockTokenService_Expecter) ResetConversation(ctx interface{}, userID interface{}) *MockTokenService_ResetConversation_Call {
	return &MockTokenService_ResetConversation_Call{Call: _e.mock.On("ResetConversation", ctx, userID)}
}

func (_c *MockTokenService_ResetConversation_Call) Run(run func(ctx context.Context, userID string)) *MockTokenService_ResetConversation_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTokenService_ResetConversation_Call) Return(_a0 error) *MockTokenService_ResetConversation_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenService_ResetConversation_Call) RunAndReturn(run func(context.Context, string) error) *MockTokenService_ResetConversation_Call {
	_c.Call.Return(run)
	return _c
}

// RevokeToken provides a mock function with given fields: ctx, userID
func (_m *MockTokenService) RevokeToken(ctx context.Context, userID string) error {
	ret := _m.Called(ctx, userID)

	if len(ret) == 0 {
		panic("no return value specified for RevokeToken")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockTokenService_RevokeToken_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RevokeToken'
type MockTokenService_RevokeToken_Call struct {
	*mock.Call
}

// RevokeToken is a helper method to define mock.On call
//   - ctx context.Context
//   - userID string
func (_e *MockTokenService_Expecter) RevokeToken(ctx interface{}, userID interface{}) *MockTokenService_RevokeToken_Call {
	return &MockTokenService_RevokeToken_Call{Call: _e.mock.On("RevokeToken", ctx, userID)}
}

func (_c *MockTokenService_RevokeToken_Call) Run(run func(ctx context.Context, userID string)) *MockTokenService_RevokeToken_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockTokenService_RevokeToken_Call) Return(_a0 error) *MockTokenService_RevokeToken_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockTokenService_RevokeToken_Call) RunAndReturn(run func(context.Context, string) error) *MockTokenService_RevokeToken_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockTokenService creates a new instance of MockTokenService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockTokenService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockTokenService {
	mock := &MockTokenService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
